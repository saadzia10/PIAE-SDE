def loss_function(nee_pred, nee_true, latent, z_prior, temp_pred, temp_true, rad_pred, rad_true, k_pred, k_true, f_pred, f_true, physics_residual, loss_fn):
    # MMD Loss for NEE (u)
    mmd_loss_nee = loss_fn(nee_pred, nee_true) + loss_fn(latent, z_prior)

    # MMD Loss for dNEE (f)
    mmd_f_loss = loss_fn(f_pred, f_true)
    
    # MMD Loss for E0 and rb (k)
    E0_pred, rb_pred, alpha_pred, beta_pred = k_pred[:, 0], k_pred[:, 1], k_pred[:, 2], k_pred[:, 3]
    E0_true, rb_true, alpha_true, beta_true = k_true[:, 0], k_true[:, 1], k_true[:, 2], k_true[:, 3]

    mmd_loss_E0 = loss_fn(E0_pred.view((-1, 1)), E0_true.view((-1, 1)))
    mmd_loss_rb = loss_fn(rb_pred.view((-1, 1)), rb_true.view((-1, 1)))
    mmd_loss_alpha = loss_fn(alpha_pred.view((-1, 1)), alpha_true.view((-1, 1)))
    mmd_loss_beta = loss_fn(beta_pred.view((-1, 1)), beta_true.view((-1, 1)))
    
    # MMD loss for temperature derivative (f)
    mmd_temp_loss = loss_fn(temp_pred.view((-1, 1)), temp_true.view((-1, 1)))

    # MMD loss for radiation derivative (f)
    mmd_rad_loss = loss_fn(rad_pred.view((-1, 1)), rad_true.view((-1, 1)))
    
    # Physics-based loss (ensure the solution satisfies the physics model)
    physics_loss = torch.mean(physics_residual ** 2)
    
    # Total loss
    # total_loss = mmd_loss_nee + mmd_loss_E0 + mmd_loss_rb + mmd_temp_loss + physics_loss + mmd_f_loss
    return mmd_loss_nee, mmd_loss_E0, mmd_loss_rb , mmd_loss_alpha, mmd_loss_beta, mmd_temp_loss , mmd_rad_loss, physics_loss , mmd_f_loss
